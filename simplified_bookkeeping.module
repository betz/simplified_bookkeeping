<?php

use \Drupal\simplified_bookkeeping\entity\BookingEntity;
use \Drupal\Core\Url;
use \Drupal\Core\Link;
use \Drupal\Core\Form\FormStateInterface;
use \Drupal\charts\Charts\ModuleSelector;
use \Drupal\views\ViewExecutable;
use \Drupal\views\Plugin\views\query\QueryPluginBase;

/**
 * Cronjob callback.
 */
function simplified_bookkeeping_cronjob_queuestatements() {
  $bookkeeping = \Drupal::service('simplified_bookkeeping.bookkeeping');
  $bookkeeping->queueStatements();
}


function simplified_bookkeeping_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  $query->distinct = TRUE;
}


/**
 * Implements hook_entity_presave().
 */
function simplified_bookkeeping_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  $bookkeeping = \Drupal::service('simplified_bookkeeping.bookkeeping');

  if (isset($entity->original)) {
    return;
  }

  if($entity->bundle() == 'bankstatement') {

    $memo = $entity->field_booking_memo->value;
    $owner_name = $entity->field_bankstatement_name->value;

    if(
      strpos($owner_name, 'Falisse') !== FALSE ||
      strpos($owner_name, 'Apelbaum') !== FALSE ||
      strpos($owner_name, 'Electrabel') !== FALSE ||
      strpos($owner_name, 'ELECTRABEL') !== FALSE ||
      strpos($owner_name, 'Federale verzekering') !== FALSE ||
      strpos($owner_name, 'Federale assurances') !== FALSE ||
      strpos($owner_name, 'AG Insurances') !== FALSE
    ) {
      $purchase_data = [
        'type' => 'purchase',
        'name' => 'Fixed Costs',
        'field_booking_amount' => $entity->field_booking_amount->value,
        'field_booking_date' => $entity->field_booking_date->value,
        'field_booking_tags' => $bookkeeping->getFixedCostsTag(),
        'uid' => 1
      ];
      $purchase = BookingEntity::create($purchase_data);
      $purchase->save();

      $entity->field_booking[] = $purchase;
      $entity->field_booking_status = 'completed';
    }

    if(
      strpos($memo, 'Bytenight') !== FALSE ||
      strpos($memo, 'bytenight') !== FALSE ||
      strpos($memo, '(bytenight)') !== FALSE ||
      strpos($memo, 'ByteNight') !== FALSE ||
      strpos($memo, 'CASH FROM KASSA') !== FALSE ||
      strpos($memo, 'Cash from kassa') !== FALSE ||
      strpos($memo, 'cash from kassa') !== FALSE ||
      strpos($memo, 'Cash from Kassa') !== FALSE ||
      strpos($owner_name, 'BITKASSA') !== FALSE ||
      strpos($owner_name, 'Storting cash') !== FALSE ||
      strpos($owner_name, 'STORTING CASH') !== FALSE ||
      strpos($owner_name, 'kassa') !== FALSE
    ) {
      $sale_data = [
        'type' => 'sale',
        'name' => 'Food & Drinks',
        'field_booking_amount' => $entity->field_booking_amount->value,
        'field_booking_date' => $entity->field_booking_date->value,
        'field_booking_tags' => $bookkeeping->getFoodDrinksTag(),
        'uid' => 1
      ];
      $sale = BookingEntity::create($sale_data);
      $sale->save();

      $entity->field_booking[] = $sale;
      $entity->field_booking_status = 'completed';
    }

    if(
      strpos($owner_name, 'Lovibond') !== FALSE ||
      strpos($owner_name, 'Brouwerij De Block') !== FALSE ||
      strpos($owner_name, 'Colruyt run') !== FALSE ||
      strpos($owner_name, 'Colruyt bill') !== FALSE ||
      strpos($memo, 'Durstloescher') !== FALSE
    ) {
      $purchase_data = [
        'type' => 'purchase',
        'name' => 'Food & Drinks',
        'field_booking_amount' => $entity->field_booking_amount->value,
        'field_booking_date' => $entity->field_booking_date->value,
        'field_booking_tags' => $bookkeeping->getFoodDrinksTag(),
        'uid' => 1
      ];
      $purchase = BookingEntity::create($purchase_data);
      $purchase->save();

      $entity->field_booking[] = $purchase;
      $entity->field_booking_status = 'completed';
    }

    if(
      strpos($owner_name, 'Socialware') !== FALSE ||
      strpos($owner_name, 'OVH') !== FALSE
    ) {
      $purchase_data = [
        'type' => 'purchase',
        'name' => 'Material',
        'field_booking_amount' => $entity->field_booking_amount->value,
        'field_booking_date' => $entity->field_booking_date->value,
        'field_booking_tags' => $bookkeeping->getMaterialTag(),
        'uid' => 1
      ];
      $purchase = BookingEntity::create($purchase_data);
      $purchase->save();

      $entity->field_booking[] = $purchase;
      $entity->field_booking_status = 'completed';
    }


  }
}

/**
 * Implements hook_form_alter().
 * Add a button 'Save and close expense note to expense not payment forms.
 */
function simplified_bookkeeping_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  switch($form_id) {
    case 'booking_cashstatement_add_form':
    case 'booking_cashstatement_edit_form':
      $form['#attached']['library'][] = 'simplified_bookkeeping/simplified_bookkeeping';
      $form['actions']['submit']['#value'] = 'Save cash statement';
      unset($form['name']);
      unset($form['revision_log_message']);
      break;

    case 'booking_bankstatement_add_form':
    case 'booking_bankstatement_edit_form':
      $form['#attached']['library'][] = 'simplified_bookkeeping/simplified_bookkeeping';
      $form['actions']['submit']['#value'] = 'Save bank statement';
      $amount = floatval($form['field_booking_amount']['widget'][0]['value']['#default_value']);
      if($amount > 0) {
        unset($form['field_booking']['widget']['actions']['bundle']['#options']['purchase']);
      }
      if($amount < 0) {
        unset($form['field_booking']['widget']['actions']['bundle']['#options']['sale']);
      }
      unset($form['name']);
      unset($form['revision_log_message']);
      unset($form['new_revision']);
      break;

    case 'booking_purchase_add_form':
    case 'booking_purchase_edit_form':
      unset($form['name']);
      unset($form['revision_log_message']);
      break;

    case 'booking_expense_note_payment_add_form':
    case 'booking_expense_note_payment_edit_form':
      $form['actions']['submit_close_expenseenote'] = array(
        '#type' => 'submit',
        '#value' => 'Save and close expense note',
        '#weight' => 7,
        '#submit' => [
          '::submitForm',
          '::save',
          'simplified_bookkeeping_close_expensenote',
        ],
      );
      break;
  }
}

function simplified_bookkeeping_inline_entity_form_entity_form_alter(&$entity_form, &$form_state) {
  if ($entity_form['#entity_type'] == 'booking' && $entity_form['#bundle'] == 'purchase') {
    unset($entity_form['name']);
    unset($entity_form['revision_log_message']);
  }
}

function simplified_bookkeeping_inline_entity_form_table_fields_alter(&$fields, $context) {
  if ($context['entity_type'] == 'booking') {
    unset($fields['label']);
    unset($fields['type']);
    $fields['bundle'] = [
      'type' => 'callback',
      'label' => t('Type'),
      'callback' => 'simplified_bookkeeping_ift_booking_bundle',
      'weight' => 100,
    ];
    $fields['date'] = [
      'type' => 'callback',
      'label' => t('Date'),
      'callback' => 'simplified_bookkeeping_ift_booking_date',
      'weight' => 101,
    ];
    $fields['amount'] = [
      'type' => 'callback',
      'label' => t('Amount'),
      'callback' => 'simplified_bookkeeping_ift_booking_amount',
      'weight' => 101,
    ];
    $fields['tags'] = [
      'type' => 'callback',
      'label' => t('Tags'),
      'callback' => 'simplified_bookkeeping_ift_booking_tags',
      'weight' => 101,
      'sanitized' => FALSE,
    ];
  }
}


function simplified_bookkeeping_ift_booking_bundle($entity, $theme) {
  return $entity->bundle();
}

function simplified_bookkeeping_ift_booking_amount($entity, $theme) {
  return $entity->field_booking_amount->value;
}

function simplified_bookkeeping_ift_booking_date($entity, $theme) {
  return $entity->field_booking_date->value;
}

function simplified_bookkeeping_ift_booking_tags($entity, $theme) {
  $terms = $entity->field_booking_tags->referencedEntities();
  foreach($terms as $term) {
    if($term->label() == 'membership') {
      $query = \Drupal::entityQuery('membership');
      $query->condition('status', 1);
      $query->condition('field_sale', $entity->id());
      $membershipID = $query->execute();
      $membership = \Drupal\hsbxl_members\Entity\Membership::load(current($membershipID));

      if($membership) {
        $url = Url::fromRoute('entity.membership.canonical', ['membership' => current($membershipID)]);
        $link = Link::fromTextAndUrl($term->label(), $url);
        $link = $link->toRenderable();
        $link['#attributes'] = ['title' => $membership->label()];
        $output[$term->id()] = render($link);
      }
      else {
        $output[$term->id()] = $term->label();
      }

    }
    else {
      $output[$term->id()] = $term->label();
    }
  }
  return [
    '#type' => 'markup',
    '#markup' => implode(', ', $output),
  ];
}


/**
 * Custom submit function for closing an expense note.
 * @param array $form
 * @param \FormStateInterface $form_state
 */
function simplified_bookkeeping_close_expensenote($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $booking_id = $entity->field_expense_note->getString();
  $expense_note = BookingEntity::load($booking_id);
  $expense_note->set('field_expensenote_status', 'closed');
  $expense_note->save();
}

/**
 * Implements hook_theme().
 */
function simplified_bookkeeping_theme() {
  $theme = [];
  $theme['booking'] = [
    'render element' => 'elements',
    'file' => 'booking.page.inc',
    'template' => 'booking',
  ];
  $theme['booking_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'booking.page.inc',
  ];
  $theme['simplified_booking_pdf_all'] = [
    'variables' => [
      'css' => NULL,
      'title' => NULL,
      'purchasediary' => NULL,
      'salediary' => NULL,
      'cashstatements' => NULL,
      'bankstatements' => NULL,
    ],
  ];
  $theme['membership-payment-received-mail'] = [
    'variables' => [
      'first_name' => 'Foo',
      'last' => 'Bar',
      'uid' => NULL,
      'amount' => '0',
      'host' => 'http://lcl.dashboard.hsbxl.be'
    ],
  ];
  $theme['simplified_bookkeeping_charts'] = [
    'template' => 'simplified_bookkeeping_charts',
    'variables' => [
      'library' => '',
      'categories' => '',
      'seriesData' => '',
      'options' => '',
    ],
  ];

  return $theme;
}

/**
 * Implements template_preprocess_page
 *
 * @param $variables
 */
function template_preprocess_simplified_bookkeeping_charts(&$variables) {
  $moduleSelector = new ModuleSelector($variables['library'], $variables['categories'], $variables['seriesData'], $variables['options'], [], $variables, 'xyz');
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function simplified_bookkeeping_theme_suggestions_booking(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#booking'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'booking__' . $sanitized_view_mode;
  $suggestions[] = 'booking__' . $entity->bundle();
  $suggestions[] = 'booking__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'booking__' . $entity->id();
  $suggestions[] = 'booking__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_views_data_alter().
 */
function simplified_bookkeeping_views_data_alter(array &$data) {
  $data['views']['purchase_vat_setter'] = array(
    'title' => t('Set VAT'),
    'field' => array(
      'title' => t('Set VAT'),
      'help' => t('Generates VAT setter links.'),
      'id' => 'purchase_vat_setter',
    ),
  );
}

/**
 * Implements hook_entity_delete().
 * Deletes the linked booking from field_booking, if any.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function simplified_bookkeeping_entity_delete(Drupal\Core\Entity\EntityInterface $entity) {

  // If the bundle is a bank or cashstatement, delete referenced bookings
  if($entity->bundle() == 'bankstatement' || $entity->bundle() == 'cashstatement') {
    $booking_entities = $entity->get('field_booking')->referencedEntities();
    foreach ($booking_entities as $booking_entity) {
      $booking_entity->delete();
    }
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function simplified_bookkeeping_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $uri = \Drupal::request()->getRequestUri();
  if($uri == '/pdf') {
    $suggestions[] = 'page__pdf';
  }
}

/**
 * Implements hook_file_download().
 * @param $uri
 */
function simplified_bookkeeping_file_download($uri) {
  $permission = "access bookkeeping";

  $scheme = file_uri_scheme($uri);
  $target = file_uri_target($uri);

  $current_user = \Drupal::currentUser();
  $account = $current_user->getAccount();

  if (in_array($scheme, ['private', 'temporary', 'session'])
    && substr( $target, 0, 22 ) === "booksbetterbebalanced/"
    && $account->hasPermission($permission)
  ) {

    return array(
      'Content-Type' => 'application/pdf',
      'Content-disposition' => 'inline; filename="' . $target . '"',
    );
  }
}

/**
 * Implements hook_mail().
 */
function simplified_bookkeeping_mail($key, &$message, $params) {
  switch ($key) {
    case 'membership_payment_received':

      $theme_body = array(
        '#theme' => 'membership-payment-received-mail',
        '#first_name' => $params['firstname'],
        '#last_name' => $params['lastname'],
        '#uid' => $params['uid'],
        '#amount' => $params['amount'],
        //'#host' => $params['host'],
      );

      $message['subject'] = t('HSBXL Membership Payment');
      $message['body'][] = drupal_render($theme_body);
      break;
  }
}