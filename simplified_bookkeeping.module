<?php

use \Drupal\simplified_bookkeeping\entity\BookingEntity;
use \Drupal\Core\Form\FormStateInterface;


/**
 * Implements hook_entity_presave().
 */
function simplified_bookkeeping_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

  if($entity->bundle() == 'sale') {

    $entity->set('field_booking_valid', FALSE);

    $field_sale_client = $entity->get('field_sale_client')->getValue()[0]['value'];
    $field_sale_payment_date = $entity->get('field_sale_payment_date')->getValue()[0]['value'];
    $field_sale_date = $entity->get('field_sale_date')->getValue()[0]['value'];
    $field_sale_total_amount = $entity->get('field_sale_total_amount')->getValue()[0]['value'];
    $field_sale_memo = $entity->get('field_sale_memo')->getValue()[0]['value'];

    if(
      (!empty($field_sale_client)) &&
      (!empty($field_sale_payment_date)) &&
      (!empty($field_sale_date)) &&
      ($field_sale_total_amount > 0) &&
      (!empty($field_sale_memo))
    ) {
      $entity->set('field_booking_valid', TRUE);
      $a = 0;
    }
  }
}

/**
 * Implements hook_entity_insert().
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 */
function simplified_bookkeeping_entity_insert(Drupal\Core\Entity\EntityInterface $entity) {

  // If the bundle is a bankstatement,
  // we differentiate between purchase and sale,
  // so we can create a purchase or sale booking.
  if($entity->bundle() == 'bankstatement') {

  $total_amount = $entity->get('field_booking_amount')->getValue()[0]['value'];

    // If the bankstatement is negative, create a purchase booking
    if($total_amount < 0) {
      $purchase = BookingEntity::create([
        'type' => 'purchase',
        'name' => $entity->get('field_bankstatement_memo')->getValue()[0]['value'],
        'field_purchase_date' => $entity->get('field_bankstatement_date')->getValue()[0]['value'],
        'field_purchase_total_amount' => $total_amount,
        'field_purchase_payment_date' => $entity->get('field_bankstatement_date')->getValue()[0]['value'],
        'field_bankstatement' => $entity->id(),
        'field_purchase_payment_method' => 'banktransfer',
        'uid' => 1
      ]);
      $purchase->save();
    }

    // If the bankstatement is positive, create a sale booking
    if($total_amount > 0) {
      $memo = $entity->get('field_bankstatement_memo')->getValue()[0]['value'];

      $sale_data = [
        'type' => 'sale',
        'name' => $memo,
        'field_sale_total_amount' => $total_amount,
        'field_sale_date' => $entity->get('field_bankstatement_date')->getValue()[0]['value'],
        'field_sale_payment_date' => $entity->get('field_bankstatement_date')->getValue()[0]['value'],
        'field_bankstatement' => $entity->id(),
        'field_sale_payment_method' => 'banktransfer',
        'uid' => 1
      ];

      // lets query the users with the structured memo.
      $query = Drupal::service('entity.query')
        ->get('user')
        ->condition('field_structured_memo', $memo);
      $entity_ids = $query->execute();

      // We have a user, lets link it.
      if(current($entity_ids) > 0) {
        $client = \Drupal::entityTypeManager()->getStorage('user')->load(current($entity_ids));
        $first_name = $client->get('field_first_name')->getValue()[0]['value'];
        $last_name = $client->get('field_last_name')->getValue()[0]['value'];
        $sale_data['field_sale_membership_member'] = current($entity_ids);
        $sale_data['field_sale_client'] = $first_name . ' ' . $last_name;
        $sale_data['field_sale_memo'] = 'Membership';

        // it is a membership payment, so calculate VAT, which is 21%.
        $sale_data['field_sale_taxable_amount_21'] = 0.21 * $total_amount;
        $sale_data['field_sale_vat'] = 0.21 * $total_amount;
      }

      // Find Bitkassa payments, set as fridge sales.
      if(strpos($memo, 'BitKassa') === 0) {
        $sale_data['field_sale_client'] = 'Drinks';
        $sale_data['field_sale_memo'] = 'Drinks';

        // it is a drink payment, calculate VAT, which is 21%.
        $sale_data['field_sale_taxable_amount_21'] = 0.21 * $total_amount;
        $sale_data['field_sale_vat'] = 0.21 * $total_amount;
      }

      $sale = BookingEntity::create($sale_data);
      $sale->save();
    }
  }
}

/**
 * Implements hook_form_alter().
 * Add a button 'Save and close expense note to expense not payment forms.
 */
function simplified_bookkeeping_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form_id == 'booking_expense_note_payment_add_form') {
    $form['actions']['submit_close_expenseenote'] = array(
      '#type' => 'submit',
      '#value' => 'Save and close expense note',
      '#weight' => 7,
      '#submit' => [
        '::submitForm',
        '::save',
        'simplified_bookkeeping_close_expensenote',
      ],
    );
  }
}

/**
 * Custom submit function for closing an expense note.
 * @param array $form
 * @param \FormStateInterface $form_state
 */
function simplified_bookkeeping_close_expensenote($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $booking_id = $entity->field_expense_note->getString();
  $expense_note = BookingEntity::load($booking_id);
  $expense_note->set('field_expensenote_status', 'closed');
  $expense_note->save();
}

/**
 * Implements hook_theme().
 */
function simplified_bookkeeping_theme() {
  $theme = [];
  $theme['booking'] = [
    'render element' => 'elements',
    'file' => 'booking.page.inc',
    'template' => 'booking',
  ];
  $theme['booking_content_add_list'] = [
    'render element' => 'content',
    'variables' => ['content' => NULL],
    'file' => 'booking.page.inc',
  ];
  return $theme;
}

/**
* Implements hook_theme_suggestions_HOOK().
*/
function simplified_bookkeeping_theme_suggestions_booking(array $variables) {
  $suggestions = [];
  $entity = $variables['elements']['#booking'];
  $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

  $suggestions[] = 'booking__' . $sanitized_view_mode;
  $suggestions[] = 'booking__' . $entity->bundle();
  $suggestions[] = 'booking__' . $entity->bundle() . '__' . $sanitized_view_mode;
  $suggestions[] = 'booking__' . $entity->id();
  $suggestions[] = 'booking__' . $entity->id() . '__' . $sanitized_view_mode;
  return $suggestions;
}

/**
 * Implements hook_views_data_alter().
 */
function simplified_bookkeeping_views_data_alter(array &$data) {
  $data['views']['purchase_vat_setter'] = array(
    'title' => t('Set VAT'),
    'field' => array(
      'title' => t('Set VAT'),
      'help' => t('Generates VAT setter links.'),
      'id' => 'purchase_vat_setter',
    ),
  );
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for node templates.
 */
function simplified_bookkeeping_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $uri = \Drupal::request()->getRequestUri();
  $a = 0;
  if($uri == '/pdf') {
    $suggestions[] = 'page__pdf';
  }
  $a = 0;
}